type Account = record {
  Id : principal;
  Email : text;
  Rented_Storages : vec principal;
  Name : text;
  My_Storages : vec principal;
  Balance : int;
};
type StorageStruct = record {
  Id : principal;
  Space : int;
  Path : text;
  Rent : int;
  RenterPrincipal : opt principal;
  RenteeDuration : opt text;
  TimePeriod : text;
  OwnerPrincipal : principal;
};
type Storages = record {
  Rented_Storages : vec principal;
  My_Storages : vec principal;
};
service : () -> {
  add_balance : (principal, nat) -> (opt nat);
  add_rentee : (principal, principal, text) -> (opt principal);
  create_account : (text, text) -> (opt principal);
  create_storage : (int, principal, text, text, int) -> (opt StorageStruct);
  delete_account : (principal) -> (opt text);
  delete_storage : (principal) -> (opt text);
  get_account : (principal) -> (opt Account) query;
  get_all_accounts : () -> (vec principal) query;
  get_all_storages : (principal) -> (opt Storages) query;
  get_balance : (principal) -> (nat) query;
  get_storage : (principal) -> (opt StorageStruct);
  remove_rentee : (principal, principal) -> (opt text);
  withdraw_balance : (principal, nat) -> (opt nat);
}